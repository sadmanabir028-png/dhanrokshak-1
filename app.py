import streamlit as st
import numpy as np
from PIL import Image
import time
import pandas as pd

# Page configuration
st.set_page_config(
    page_title="‡¶ß‡¶æ‡¶®‡¶∞‡¶ï‡ßç‡¶∑‡¶ï - AI ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£",
    page_icon="https://www.pinterest.com/pin/76209418689740748/",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for Bengali interface
st.markdown("""
<style>
    .main {
        direction: ltr;
    }
    .bengali-font {
        font-family: 'Noto Sans Bengali', 'SolaimanLipi', 'Kalpurush', sans-serif;
    }
    .success-box {
        background: linear-gradient(135deg, #E8F5E8, #FFFFFF);
        padding: 25px;
        border-radius: 15px;
        border-left: 5px solid #2E8B57;
        margin: 10px 0;
    }
    .disease-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        margin: 10px 0;
        border: 1px solid #E0E0E0;
    }
    .header-bg {
        background: linear-gradient(135deg, #2E8B57, #1A5D1A);
        padding: 30px;
        border-radius: 15px;
        color: white;
        text-align: center;
    }
    .upload-box {
        border: 2px dashed #2E8B57;
        border-radius: 10px;
        padding: 30px;
        text-align: center;
        background: #F8FFF8;
        margin: 20px 0;
    }
</style>
""", unsafe_allow_html=True)

class RiceDiseaseDetector:
    def __init__(self):
        self.disease_info = {
            'Healthy': {
                'bn_name': '‡¶∏‡ßÅ‡¶∏‡ßç‡¶• ‡¶ß‡¶æ‡¶®',
                'type': '‡¶∏‡ßÅ‡¶∏‡ßç‡¶•',
                'symptoms': '‡¶∏‡¶¨‡ßÅ‡¶ú ‡¶ì ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶™‡¶æ‡¶§‡¶æ, ‡¶ï‡ßã‡¶®‡ßã ‡¶¶‡¶æ‡¶ó ‡¶¨‡¶æ ‡¶ï‡ßç‡¶∑‡¶§ ‡¶®‡ßá‡¶á',
                'treatment': [
                    '‡¶®‡¶ø‡ßü‡¶Æ‡¶ø‡¶§ ‡¶™‡¶∞‡ßç‡¶Ø‡¶¨‡ßá‡¶ï‡ßç‡¶∑‡¶£ ‡¶ö‡¶æ‡¶≤‡¶ø‡ßü‡ßá ‡¶Ø‡¶æ‡¶®',
                    '‡¶∏‡ßÅ‡¶∑‡¶Æ ‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶∏‡ßá‡¶ö ‡¶ì ‡¶∏‡ßÇ‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ï ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'prevention': [
                    '‡¶∏‡¶†‡¶ø‡¶ï ‡¶¶‡ßÇ‡¶∞‡¶§‡ßç‡¶¨‡ßá ‡¶ö‡¶æ‡¶∞‡¶æ ‡¶∞‡ßã‡¶™‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶∏‡¶Æ‡ßü‡¶Æ‡¶§‡ßã ‡¶∏‡ßá‡¶ö ‡¶ì ‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶¨‡¶æ‡ßü‡ßÅ ‡¶ö‡¶≤‡¶æ‡¶ö‡¶≤ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'urgency': '‡¶ï‡¶Æ',
                'emoji': '‚úÖ'
            },
            'Leaf_Blast': {
                'bn_name': '‡¶¨‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ü ‡¶∞‡ßã‡¶ó',
                'type': '‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶ú‡¶®‡¶ø‡¶§',
                'symptoms': '‡¶™‡¶æ‡¶§‡¶æ‡¶Ø‡¶º ‡¶°‡¶ø‡¶Æ‡ßç‡¶¨‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø ‡¶¨‡¶æ ‡¶∞‡¶Æ‡ßç‡¶¨‡¶∏ ‡¶Ü‡¶ï‡ßÉ‡¶§‡¶ø‡¶∞ ‡¶¶‡¶æ‡¶ó, ‡¶ï‡ßá‡¶®‡ßç‡¶¶‡ßç‡¶∞ ‡¶ß‡ßÇ‡¶∏‡¶∞, ‡¶™‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡¶ø',
                'treatment': [
                    '‡¶Ü‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶™‡¶æ‡¶§‡¶æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶ï‡ßá‡¶ü‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
                    '‡¶ü‡ßç‡¶∞‡¶æ‡¶á‡¶∏‡¶æ‡¶á‡¶ï‡ßç‡¶≤‡¶æ‡¶ú‡¶≤ ‡¶¨‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶ú‡¶ø‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶®‡¶æ‡¶∂‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶®‡¶ø ‡¶®‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∂‡¶® ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶Ö‡¶´‡¶ø‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'prevention': [
                    '‡¶¨‡ßç‡¶≤‡¶æ‡¶∏‡ßç‡¶ü-‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß‡ßÄ ‡¶ú‡¶æ‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶® ‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶è‡ßú‡¶ø‡ßü‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®',
                    '‡¶´‡¶∏‡¶≤ ‡¶Ü‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶¨‡ßÄ‡¶ú ‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'urgency': '‡¶â‡¶ö‡ßç‡¶ö',
                'emoji': 'ü¶†'
            },
            'Brown_Spot': {
                'bn_name': '‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡¶ø ‡¶¶‡¶æ‡¶ó ‡¶∞‡ßã‡¶ó',
                'type': '‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶ú‡¶®‡¶ø‡¶§',
                'symptoms': '‡¶™‡¶æ‡¶§‡¶æ‡¶Ø‡¶º ‡¶ó‡ßã‡¶≤‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶¨‡¶æ‡¶¶‡¶æ‡¶Æ‡¶ø ‡¶¶‡¶æ‡¶ó, ‡¶™‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶π‡¶≤‡ßÅ‡¶¶',
                'treatment': [
                    '‡¶Ü‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶ó‡¶æ‡¶õ ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
                    '‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡¶ï‡ßã‡¶ú‡ßá‡¶¨ ‡¶¨‡¶æ ‡¶ï‡¶æ‡¶∞‡ßç‡¶¨‡ßá‡¶®‡ßç‡¶°‡¶æ‡¶ú‡¶ø‡¶Æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶õ‡¶§‡ßç‡¶∞‡¶æ‡¶ï‡¶®‡¶æ‡¶∂‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶ú‡ßà‡¶¨‡¶∏‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶∏‡ßÅ‡¶∑‡¶Æ ‡¶∏‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'prevention': [
                    '‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶¨‡ßÄ‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶¨‡ßÄ‡¶ú ‡¶∂‡ßã‡¶ß‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶™‡¶ü‡¶æ‡¶∂ ‡¶∏‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶´‡¶∏‡¶≤‡ßá‡¶∞ ‡¶Ö‡¶¨‡¶∂‡¶ø‡¶∑‡ßç‡¶ü‡¶æ‡¶Ç‡¶∂ ‡¶™‡ßÅ‡ßú‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®'
                ],
                'urgency': '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ',
                'emoji': 'üî¥'
            },
            'Bacterial_Blight': {
                'bn_name': '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶≤ ‡¶¨‡ßç‡¶≤‡¶æ‡¶á‡¶ü',
                'type': '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶ú‡¶®‡¶ø‡¶§',
                'symptoms': '‡¶™‡¶æ‡¶§‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶®‡¶ø‡¶≠‡ßá‡¶ú‡¶æ‡¶®‡ßã ‡¶¶‡¶æ‡¶ó ‡¶Ø‡¶æ ‡¶™‡¶∞‡ßá ‡¶∏‡¶æ‡¶¶‡¶æ ‡¶¨‡¶æ ‡¶ß‡ßÇ‡¶∏‡¶∞ ‡¶π‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º',
                'treatment': [
                    '‡¶Ü‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ ‡¶ó‡¶æ‡¶õ ‡¶∏‡¶∞‡¶ø‡ßü‡ßá ‡¶´‡ßá‡¶≤‡ßÅ‡¶®',
                    '‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ü‡ßá‡¶∞‡¶ø‡¶∏‡¶æ‡¶á‡¶° ‡¶Ø‡ßá‡¶Æ‡¶® ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡ßá‡¶™‡¶ü‡ßã‡¶Æ‡¶æ‡¶á‡¶∏‡¶ø‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶®‡¶æ‡¶á‡¶ü‡ßç‡¶∞‡ßã‡¶ú‡ßá‡¶® ‡¶∏‡¶æ‡¶∞‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶è‡ßú‡¶ø‡ßü‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®',
                    '‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶´‡¶ø‡¶∏‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶®'
                ],
                'prevention': [
                    '‡¶¨‡¶®‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶∞‡¶¨‡¶£ ‡¶è‡¶≤‡¶æ‡¶ï‡¶æ‡ßü ‡¶â‡¶Å‡¶ö‡ßÅ ‡¶¨‡ßÄ‡¶ú‡¶§‡¶≤‡¶æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶∏‡ßá‡¶ö‡ßá‡¶∞ ‡¶™‡¶æ‡¶®‡¶ø ‡¶Ø‡¶æ‡¶§‡ßá ‡¶è‡¶ï ‡¶ú‡¶Æ‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ú‡¶Æ‡¶ø‡¶§‡ßá ‡¶®‡¶æ ‡¶Ø‡¶æ‡ßü ‡¶∏‡ßá‡¶¶‡¶ø‡¶ï‡ßá ‡¶ñ‡ßá‡ßü‡¶æ‡¶≤ ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®',
                    '‡¶∞‡ßã‡¶ó‡¶Æ‡ßÅ‡¶ï‡ßç‡¶§ ‡¶¨‡ßÄ‡¶ú ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®',
                    '‡¶ï‡ßç‡¶∑‡¶§‡¶ø‡¶ï‡¶∞ ‡¶™‡ßã‡¶ï‡¶æ ‡¶¶‡¶Æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®'
                ],
                'urgency': '‡¶â‡¶ö‡ßç‡¶ö',
                'emoji': 'ü¶†'
            }
        }
    
    def predict(self, image):
        """Simulate AI prediction with realistic confidence scores"""
        # Simulate processing time
        time.sleep(2)
        
        # Convert image to numpy array for analysis
        img_array = np.array(image)
        
        # Simple color-based analysis (in real app, use your trained model)
        avg_color = np.mean(img_array, axis=(0,1))
        
        # Realistic disease probabilities based on image characteristics
        if avg_color[1] > 150:  # High green value - likely healthy
            diseases = ['Healthy', 'Brown_Spot', 'Bacterial_Blight', 'Leaf_Blast']
            probs = [0.75, 0.15, 0.06, 0.04]
        else:  # Lower green value - likely diseased
            diseases = ['Leaf_Blast', 'Brown_Spot', 'Bacterial_Blight', 'Healthy']
            probs = [0.65, 0.20, 0.10, 0.05]
        
        # Add some randomness for realism
        probs = np.array(probs) + np.random.uniform(-0.1, 0.1, len(probs))
        probs = np.clip(probs, 0, 1)
        probs = probs / np.sum(probs)  # Normalize
        
        diagnosis = diseases[np.argmax(probs)]
        confidence = np.max(probs)
        
        confidence_scores = {diseases[i]: float(probs[i]) for i in range(len(diseases))}
        
        return diagnosis, confidence, confidence_scores

def main():
    # Header Section
    st.markdown("""
    <div class="header-bg">
        <h1 class="bengali-font">üåæ ‡¶ß‡¶æ‡¶®‡¶∞‡¶ï‡ßç‡¶∑‡¶ï</h1>
        <h3 class="bengali-font">‡¶ï‡ßÉ‡¶§‡ßç‡¶∞‡¶ø‡¶Æ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶ö‡¶æ‡¶≤‡¶ø‡¶§ ‡¶ß‡¶æ‡¶® ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£ ÏãúÏä§ÌÖú</h3>
        <p class="bengali-font">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ß‡¶æ‡¶® ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡ßé‡¶ï‡ßç‡¶∑‡¶£‡¶ø‡¶ï ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£ ‡¶™‡¶æ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Main Content
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üì∏ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ì ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£")
        
        # Image upload section with better UI
        st.markdown("""
        <div class="upload-box">
            <h3 class="bengali-font">‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
            <p class="bengali-font">‡¶ß‡¶æ‡¶® ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶õ‡¶¨‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            type=['jpg', 'jpeg', 'png'],
            help="‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶≠‡¶æ‡¶≤‡ßã ‡¶Ü‡¶≤‡ßã‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
            label_visibility="collapsed"
        )
        
        if uploaded_file is not None:
            # Display uploaded image
            image = Image.open(uploaded_file)
            st.image(image, caption="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø", use_column_width=True)
            
            # Analysis button
            if st.button("ü§ñ AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary", use_container_width=True):
                with st.spinner('‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... ‡¶ï‡¶Ø‡¶º‡ßá‡¶ï ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶®‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá'):
                    detector = RiceDiseaseDetector()
                    diagnosis, confidence, confidence_scores = detector.predict(image)
                    
                    disease_info = detector.disease_info.get(diagnosis, {})
                    
                    # Display results
                    st.markdown(f"""
                    <div class="success-box">
                        <h3 class="bengali-font">üéØ ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</h3>
                        <p class="bengali-font"><strong>‡¶∞‡ßã‡¶ó:</strong> {disease_info.get('emoji', '')} {disease_info.get('bn_name', diagnosis)}</p>
                        <p class="bengali-font"><strong>‡¶Ü‡¶§‡ßç‡¶Æ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶æ‡¶∏:</strong> {confidence*100:.1f}%</p>
                        <p class="bengali-font"><strong>‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®:</strong> {disease_info.get('type', '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ')}</p>
                        <p class="bengali-font"><strong>‡¶ú‡¶∞‡ßÅ‡¶∞‡ßÄ‡¶§‡ßç‡¶¨:</strong> {disease_info.get('urgency', '‡¶Æ‡¶ß‡ßç‡¶Ø‡¶Æ')}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Symptoms
                    st.subheader("üîç ‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡¶∏‡¶Æ‡ßÇ‡¶π")
                    st.info(disease_info.get('symptoms', '‡¶≤‡¶ï‡ßç‡¶∑‡¶£‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø'))
                    
                    # Treatment advice
                    st.subheader("üíä ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂")
                    for i, treatment in enumerate(disease_info.get('treatment', []), 1):
                        st.write(f"{i}. {treatment}")
                    
                    # Prevention advice
                    st.subheader("üõ°Ô∏è ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∞‡ßã‡¶ß ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ")
                    for i, prevention in enumerate(disease_info.get('prevention', []), 1):
                        st.write(f"{i}. {prevention}")
                    
                    # Confidence scores chart
                    st.subheader("üìä ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ")
                    conf_df = pd.DataFrame({
                        '‡¶∞‡ßã‡¶ó': [detector.disease_info.get(d, {}).get('bn_name', d) for d in confidence_scores.keys()],
                        '‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ (%)': [score * 100 for score in confidence_scores.values()]
                    }).sort_values('‡¶∏‡¶Æ‡ßç‡¶≠‡¶æ‡¶¨‡¶®‡¶æ (%)', ascending=False)
                    
                    st.bar_chart(conf_df.set_index('‡¶∞‡ßã‡¶ó'))
    
    with col2:
        st.header("‚ÑπÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ")
        
        st.markdown("""
        <div class="disease-card">
        <h4 class="bengali-font">‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶®:</h4>
        <ol class="bengali-font">
        <li><strong>‡¶õ‡¶¨‡¶ø ‡¶§‡ßÅ‡¶≤‡ßÅ‡¶®:</strong> ‡¶ß‡¶æ‡¶® ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶õ‡¶¨‡¶ø</li>
        <li><strong>‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®:</strong> ‡¶¨‡¶æ‡¶Æ ‡¶™‡¶æ‡¶∂ ‡¶•‡ßá‡¶ï‡ßá ‡¶õ‡¶¨‡¶ø ‡¶Ü‡¶™‡¶≤‡ßã‡¶°</li>
        <li><strong>‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶®:</strong> AI ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï</li>
        <li><strong>‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶™‡¶æ‡¶®:</strong> ‡¶∞‡ßã‡¶ó ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§‡¶ï‡¶∞‡¶£ ‡¶ì ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ</li>
        </ol>
        </div>
        """, unsafe_allow_html=True)
        
        st.header("üìã ‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        
        detector = RiceDiseaseDetector()
        for disease, info in detector.disease_info.items():
            with st.expander(f"{info.get('emoji', 'üå±')} {info['bn_name']}"):
                st.write(f"**‡¶ß‡¶∞‡¶®:** {info['type']}")
                st.write(f"**‡¶ú‡¶∞‡ßÅ‡¶∞‡ßÄ‡¶§‡ßç‡¶¨:** {info['urgency']}")
                st.write(f"**‡¶≤‡¶ï‡ßç‡¶∑‡¶£:** {info['symptoms'][:100]}...")
        
        st.header("üìû ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó")
        st.markdown("""
        <div class="disease-card">
        <p class="bengali-font">‡¶Ø‡¶¶‡¶ø ‡¶∞‡ßã‡¶ó ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡¶∞ ‡¶π‡¶Ø‡¶º:</p>
        <ul class="bengali-font">
        <li>‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßÄ‡¶Ø‡¶º ‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶Ö‡¶´‡¶ø‡¶∏</li>
        <li>‡¶ï‡ßÉ‡¶∑‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶∏‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßç‡¶Æ‡¶ï‡¶∞‡ßç‡¶§‡¶æ</li>
        <li>‡¶ß‡¶æ‡¶® ‡¶ó‡¶¨‡ßá‡¶∑‡¶£‡¶æ ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶ø‡¶ü‡¶ø‡¶â‡¶ü</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
        
        st.header("üí° ‡¶õ‡¶¨‡¶ø ‡¶§‡ßã‡¶≤‡¶æ‡¶∞ ‡¶ü‡¶ø‡¶™‡¶∏")
        st.markdown("""
        <div class="disease-card">
        <ul class="bengali-font">
        <li>‡¶™‡ßç‡¶∞‡¶æ‡¶ï‡ßÉ‡¶§‡¶ø‡¶ï ‡¶Ü‡¶≤‡ßã‡¶§‡ßá ‡¶õ‡¶¨‡¶ø ‡¶§‡ßÅ‡¶≤‡ßÅ‡¶®</li>
        <li>‡¶ï‡ßç‡¶≤‡ßã‡¶ú-‡¶Ü‡¶™ ‡¶∂‡¶ü ‡¶®‡¶ø‡¶®</li>
        <li>‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶ï‡ßç‡¶∑‡¶§ ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®</li>
        <li>‡¶ù‡¶æ‡¶™‡¶∏‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡¶≤‡ßÅ‡¶®</li>
        </ul>
        </div>
        """, unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666;">
        <p class="bengali-font">¬© ‡ß®‡ß¶‡ß®‡ß™ ‡¶ß‡¶æ‡¶®‡¶∞‡¶ï‡ßç‡¶∑‡¶ï - ‡¶ï‡ßÉ‡¶∑‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø AI ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®</p>
        <p class="bengali-font">‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂ ‡¶ì ‡¶≠‡¶æ‡¶∞‡¶§‡ßá‡¶∞ ‡¶ï‡ßÉ‡¶∑‡¶ï‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶¨‡ßá‡¶¶‡¶ø‡¶§</p>
        <p><small>Made with ‚ù§Ô∏è for Farmers</small></p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
